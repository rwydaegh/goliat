@startuml classes_GOLIAT
set namespaceSeparator none
class "Analyzer" as src.analysis.analyzer.Analyzer {
  all_organ_results : list
  all_results : list
  base_dir
  config
  phantom_name : str
  plotter
  results_base_dir
  strategy
  tissue_group_definitions : dict
  __init__(config: Config, phantom_name: str, strategy: BaseAnalysisStrategy)
  _convert_units_and_cache(results_df, organ_results_df)
  _export_reports(results_df, all_organ_results_df)
  _generate_plots(results_df, all_organ_results_df)
  _process_single_result(frequency_mhz, scenario_name, pos_name, orient_name)
  run_analysis()
}
class "Antenna" as src.antenna.Antenna {
  antenna_config
  config
  frequency_mhz
  __init__(config, frequency_mhz)
  get_centered_antenna_path(centered_antennas_dir)
  get_config_for_frequency()
  get_model_type()
  get_source_entity_name()
}
class "BaseAnalysisStrategy" as src.analysis.strategies.BaseAnalysisStrategy {
  base_dir
  config
  phantom_name
  __init__(config, phantom_name)
  {abstract}apply_bug_fixes(result_entry)
  {abstract}calculate_summary_stats(results_df)
  {abstract}extract_data(pickle_data, frequency_mhz, detailed_name, scenario_name, sim_power, norm_factor)
  {abstract}generate_plots(analyzer, plotter, results_df, all_organ_results_df)
  {abstract}get_normalization_factor(frequency_mhz, simulated_power_w)
  {abstract}get_plots_dir()
  {abstract}get_results_base_dir()
  {abstract}load_and_process_results(analyzer)
}
class "BaseSetup" as src.setups.base_setup.BaseSetup {
  config
  emfdtd
  model
  progress_logger
  s4l_v1
  verbose_logger
  __init__(config, verbose_logger, progress_logger)
  _add_point_sensors(simulation, sim_bbox_entity_name)
  _apply_simulation_time_and_termination(simulation, sim_bbox_entity, frequency_mhz)
  _finalize_setup(project_manager, simulation, all_simulation_parts, frequency_mhz)
  _setup_solver_settings(simulation)
  {abstract}run_full_setup(project_manager)
}
class "BaseStudy" as src.studies.base_study.BaseStudy {
  base_dir
  config
  gui : NoneType
  line_profiler : NoneType
  profiler
  progress_logger : NoneType, RootLogger
  project_manager
  study_type
  verbose_logger : NoneType, RootLogger
  __init__(study_type, config_filename, gui, profiler)
  _check_for_stop_signal()
  {abstract}_run_study()
  _setup_line_profiler(subtask_name, instance)
  end_stage_animation()
  run()
  start_stage_animation(task_name, end_value)
  subtask(task_name, instance_to_profile)
}
class "BatchGUI" as src.osparc_batch.gui.BatchGUI {
  button_layout
  cancel_jobs_requested
  force_stop_button
  layout
  print_progress_requested
  progress_button
  stop_and_cancel_button
  stop_run_requested
  tray_button
  tray_icon
  __init__()
  closeEvent(event)
  force_stop_run()
  hide_to_tray()
  init_ui()
  show_from_tray()
  stop_and_cancel_jobs()
  tray_icon_activated(reason)
}
class "BoundarySetup" as src.setups.boundary_setup.BoundarySetup {
  simulation
  __init__(config, simulation, verbose_logger, progress_logger)
  setup_boundary_conditions()
}
class "ColorFormatter" as src.logging_manager.ColorFormatter {
  format(record)
}
class "Config" as src.config.Config {
  base_dir
  config
  config_path
  material_mapping
  material_mapping_path
  profiling_config
  profiling_config_path
  __init__(base_dir, config_filename)
  _load_config_with_inheritance(path)
  _load_json(path)
  _resolve_config_path(config_filename, base_path)
  get_antenna_component_names(antenna_model_type)
  get_antenna_config()
  get_bandwidth()
  get_excitation_type()
  get_freespace_expansion()
  get_gridding_parameters()
  get_line_profiling_config()
  get_manual_isolve()
  get_material_mapping(phantom_name)
  get_only_write_input_file()
  get_osparc_credentials()
  get_phantom_config(phantom_name)
  get_phantom_placements(phantom_name)
  get_placement_scenario(scenario_name)
  get_profiling_config(study_type)
  get_server()
  get_setting(path, default)
  get_simulation_parameters()
  get_solver_settings()
}
class "FarFieldAnalysisStrategy" as src.analysis.strategies.FarFieldAnalysisStrategy {
  apply_bug_fixes(result_entry)
  calculate_summary_stats(results_df)
  extract_data(pickle_data, frequency_mhz, placement_name, scenario_name, sim_power, norm_factor)
  generate_plots(analyzer, plotter, results_df, all_organ_results_df)
  get_normalization_factor(frequency_mhz, simulated_power_w)
  get_plots_dir()
  get_results_base_dir()
  load_and_process_results(analyzer)
}
class "FarFieldSetup" as src.setups.far_field_setup.FarFieldSetup {
  direction_name
  document
  frequency_mhz
  phantom_name
  polarization_name
  project_manager
  simulation_type
  __init__(config, phantom_name, frequency_mhz, direction_name, polarization_name, project_manager, verbose_logger, progress_logger)
  _apply_common_settings(simulation)
  _create_or_get_simulation_bbox()
  _create_simulation_entity(bbox_entity)
  _finalize_setup(project_manager, simulation, frequency_mhz)
  run_full_setup(phantom_setup)
}
class "FarFieldStudy" as src.studies.far_field_study.FarFieldStudy {
  __init__(config_filename, gui)
  _extract_results_for_project(phantom_name, freq, simulations_to_extract)
  _run_study()
}
class "GriddingSetup" as src.setups.gridding_setup.GriddingSetup {
  antenna
  frequency_mhz : NoneType
  placement_name
  simulation
  units
  __init__(config, simulation, placement_name, antenna, verbose_logger, progress_logger, frequency_mhz)
  _setup_main_grid()
  _setup_subgrids(antenna_components)
  setup_gridding(antenna_components)
}
class "LoggingMixin" as src.logging_manager.LoggingMixin {
  _log(message, level, log_type)
}
class "MaterialSetup" as src.setups.material_setup.MaterialSetup {
  XCoreModeling
  antenna
  database
  free_space : bool
  phantom_name
  simulation
  __init__(config, simulation, antenna, phantom_name, verbose_logger, progress_logger, free_space)
  _assign_antenna_materials(antenna_components)
  _assign_phantom_materials()
  assign_materials(antenna_components, phantom_only)
}
class "NearFieldAnalysisStrategy" as src.analysis.strategies.NearFieldAnalysisStrategy {
  apply_bug_fixes(result_entry)
  calculate_summary_stats(results_df)
  extract_data(pickle_data, frequency_mhz, placement_name, scenario_name, sim_power, norm_factor)
  generate_plots(analyzer, plotter, results_df, all_organ_results_df)
  get_normalization_factor(frequency_mhz, simulated_power_w)
  get_plots_dir()
  get_results_base_dir()
  load_and_process_results(analyzer)
}
class "NearFieldSetup" as src.setups.near_field_setup.NearFieldSetup {
  XCoreModeling
  antenna
  base_placement_name : str
  document
  free_space : bool
  frequency_mhz
  phantom_name
  placement_name
  __init__(config, phantom_name, frequency_mhz, placement_name, antenna, verbose_logger, progress_logger, free_space)
  _create_simulation_bbox()
  _finalize_setup(project_manager, simulation, antenna_components)
  _get_antenna_components()
  _setup_bounding_boxes()
  _setup_simulation_entity()
  run_full_setup(project_manager, lock)
}
class "NearFieldStudy" as src.studies.near_field_study.NearFieldStudy {
  __init__(config_filename, gui)
  _run_placement(phantom_name, freq, placement_name, do_setup, do_run, do_extract)
  _run_study()
}
class "PhantomSetup" as src.setups.phantom_setup.PhantomSetup {
  XCoreModeling
  data
  model
  phantom_name
  __init__(config, phantom_name, verbose_logger, progress_logger)
  _log(message, log_type)
  ensure_phantom_is_loaded()
}
class "PlacementSetup" as src.setups.placement_setup.PlacementSetup {
  XCoreMath
  antenna
  base_placement_name : str
  free_space : bool
  frequency_mhz
  orientation_name : str
  phantom_name
  placement_name
  position_name : str
  __init__(config, phantom_name, frequency_mhz, placement_name, antenna, verbose_logger, progress_logger, free_space)
  _get_placement_details()
  place_antenna()
}
class "Plotter" as src.analysis.plotter.Plotter {
  plots_dir
  __init__(plots_dir)
  _plot_heatmap(fig, ax, data, title, cbar, cbar_ax)
  plot_average_sar_bar(scenario_name, avg_results, progress_info)
  plot_far_field_distribution_boxplot(results_df, metric)
  plot_peak_sar_heatmap(organ_df, group_df, tissue_groups, value_col, title)
  plot_peak_sar_line(summary_stats)
  plot_pssar_line(scenario_name, avg_results)
  plot_sar_distribution_boxplots(scenario_name, scenario_results_df)
  plot_sar_heatmap(organ_df, group_df, tissue_groups)
  plot_whole_body_sar_bar(avg_results)
}
class "Profiler" as src.profiler.Profiler {
  completed_phases : set
  completed_simulations : int
  completed_stages_in_phase : int
  config_path
  current_phase : NoneType, str
  current_project : int
  execution_control
  phase_start_time : NoneType
  phase_weights : dict
  profiling_config
  run_phase_total_duration : int
  start_time
  study_type
  subtask_stack : list
  subtask_times : defaultdict
  total_projects : int
  total_simulations : int
  total_stages_in_phase : int
  __init__(execution_control, profiling_config, study_type, config_path)
  _calculate_phase_weights()
  complete_run_phase()
  end_stage()
  get_subtask_estimate(task_name)
  get_time_remaining(current_stage_progress)
  get_weighted_progress(phase_name, phase_progress_ratio)
  save_estimates()
  set_current_project(project_index)
  set_project_scope(total_projects)
  set_total_simulations(total)
  start_stage(phase_name, total_stages)
  update_and_save_estimates()
}
class "Profiler" as src.utils.Profiler {
  completed_runs : int
  config_path
  current_run_start_time : NoneType
  profiling_config
  run_times : list
  start_time
  study_type : str
  total_runs : int
  __init__(config_path, study_type)
  _load_config()
  end_run()
  get_average_run_time()
  get_elapsed()
  get_time_remaining()
  save_estimates()
  start_run()
  start_study(total_runs)
  subtask(name)
}
class "ProgressGUI" as src.gui_manager.ProgressGUI {
  animation_active : bool
  animation_duration : int
  animation_end_value : int
  animation_start_time : int
  animation_start_value : int
  animation_timer
  button_layout
  clock_timer
  elapsed_label
  eta_label
  grid_layout
  layout
  overall_progress_bar
  overall_progress_label
  phase_name_map : dict
  process
  profiler
  profiler_phase : NoneType
  progress_logger : NoneType, RootLogger
  queue
  queue_timer
  stage_label
  stage_progress_bar
  start_time
  status_log_label
  status_text
  stop_button
  stop_event
  total_steps_for_stage : int
  tray_button
  tray_icon
  verbose_logger : NoneType, RootLogger
  window_title : str
  __init__(queue, stop_event, process, window_title)
  closeEvent(event)
  end_stage_animation()
  hide_to_tray()
  init_ui()
  process_queue()
  show_from_tray()
  start_stage_animation(estimated_duration, end_step)
  stop_study()
  study_finished(error)
  tray_icon_activated(reason)
  update_animation()
  update_clock()
  update_overall_progress(current_step, total_steps)
  update_stage_progress(stage_name, current_step, total_steps)
  update_status(message, log_type)
}
class "<color:red>ProjectCorruptionError</color>" as src.project_manager.ProjectCorruptionError {
}
class "ProjectManager" as src.project_manager.ProjectManager {
  config
  document
  execution_control
  gui : NoneType
  progress_logger
  project_path : NoneType
  verbose_logger
  __init__(config, verbose_logger, progress_logger, gui)
  _is_valid_smash_file()
  cleanup()
  close()
  create_new()
  create_or_open_project(phantom_name, frequency_mhz, placement_name)
  open()
  reload_project()
  save()
}
class "QueueGUI" as src.gui_manager.QueueGUI {
  profiler
  progress_logger
  queue
  stop_event
  verbose_logger
  __init__(queue, stop_event, profiler, progress_logger, verbose_logger)
  end_stage_animation()
  is_stopped()
  log(message, level, log_type)
  {abstract}process_events()
  start_stage_animation(task_name, end_value)
  update_overall_progress(current_step, total_steps)
  update_profiler()
  update_stage_progress(stage_name, current_step, total_steps)
}
class "ResultsExtractor" as src.results_extractor.ResultsExtractor {
  analysis
  config
  document
  free_space : bool
  frequency_mhz
  gui : NoneType
  phantom_name
  placement_name
  progress_logger
  simulation
  study : NoneType
  study_type
  units
  verbose_logger
  __init__(config, simulation, phantom_name, frequency_mhz, placement_name, study_type, verbose_logger, progress_logger, free_space, gui, study)
  _calculate_group_sar(df, tissue_groups)
  _define_tissue_groups(available_tissues)
  _extract_input_power(simulation_extractor, results_data)
  _extract_peak_sar_details(em_sensor_extractor, results_data)
  _extract_point_sensor_data(simulation_extractor, results_data)
  _extract_power_balance(simulation_extractor, results_data)
  _extract_sar_statistics(simulation_extractor, results_data)
  _save_reports(df, tissue_groups, group_sar_stats, results_data)
  extract()
}
class "SimulationRunner" as src.simulation_runner.SimulationRunner {
  config
  document
  gui : NoneType
  progress_logger
  project_path
  simulations : list
  study : NoneType
  verbose_logger
  __init__(config, project_path, simulations, verbose_logger, progress_logger, gui, study)
  _run_isolve_manual(simulation)
  _run_osparc_direct(simulation, server_name)
  run(simulation)
  run_all()
}
class "SourceSetup" as src.setups.source_setup.SourceSetup {
  antenna
  free_space : bool
  frequency_mhz
  simulation
  units
  __init__(config, simulation, frequency_mhz, antenna, verbose_logger, progress_logger, free_space)
  setup_source_and_sensors(antenna_components)
}
class "<color:red>StudyCancelledError</color>" as src.utils.StudyCancelledError {
}
class "Worker" as src.osparc_batch.worker.Worker {
  client_cfg : NoneType
  config : NoneType
  config_path : str
  download_and_process_results : Callable[..., Any]
  download_executor : ThreadPoolExecutor
  downloaded_jobs : set
  file_retries : dict
  file_to_job_id : dict
  finished
  get_osparc_client_config : Callable[..., Any]
  get_progress_report : Callable[..., str]
  input_files : list
  job_statuses : dict
  jobs_being_downloaded : set
  logger : Logger
  main_process_logic : Callable[..., Any]
  progress
  running_jobs : dict
  status_update_requested
  stop_requested : bool
  timer
  __init__(config_path: str, logger: logging.Logger, get_osparc_client_config_func: Callable[..., Any], download_and_process_results_func: Callable[..., Any], get_progress_report_func: Callable[..., str], main_process_logic_func: Callable[..., Any])
  _check_jobs_status()
  _download_job_in_thread(job, solver, file_path)
  _resubmit_job(file_path)
  _update_job_status(job_id, status)
  cancel_jobs()
  request_progress_report()
  run()
  stop()
}
src.analysis.strategies.FarFieldAnalysisStrategy --|> src.analysis.strategies.BaseAnalysisStrategy
src.analysis.strategies.NearFieldAnalysisStrategy --|> src.analysis.strategies.BaseAnalysisStrategy
src.gui_manager.QueueGUI --|> src.logging_manager.LoggingMixin
src.project_manager.ProjectManager --|> src.logging_manager.LoggingMixin
src.results_extractor.ResultsExtractor --|> src.logging_manager.LoggingMixin
src.setups.base_setup.BaseSetup --|> src.logging_manager.LoggingMixin
src.setups.boundary_setup.BoundarySetup --|> src.setups.base_setup.BaseSetup
src.setups.far_field_setup.FarFieldSetup --|> src.setups.base_setup.BaseSetup
src.setups.gridding_setup.GriddingSetup --|> src.setups.base_setup.BaseSetup
src.setups.material_setup.MaterialSetup --|> src.setups.base_setup.BaseSetup
src.setups.near_field_setup.NearFieldSetup --|> src.setups.base_setup.BaseSetup
src.setups.phantom_setup.PhantomSetup --|> src.setups.base_setup.BaseSetup
src.setups.placement_setup.PlacementSetup --|> src.setups.base_setup.BaseSetup
src.setups.source_setup.SourceSetup --|> src.setups.base_setup.BaseSetup
src.simulation_runner.SimulationRunner --|> src.logging_manager.LoggingMixin
src.studies.base_study.BaseStudy --|> src.logging_manager.LoggingMixin
src.studies.far_field_study.FarFieldStudy --|> src.studies.base_study.BaseStudy
src.studies.near_field_study.NearFieldStudy --|> src.studies.base_study.BaseStudy
src.analysis.plotter.Plotter --* src.analysis.analyzer.Analyzer : plotter
src.config.Config --* src.studies.base_study.BaseStudy : config
src.profiler.Profiler --* src.studies.base_study.BaseStudy : profiler
src.project_manager.ProjectManager --* src.studies.base_study.BaseStudy : project_manager
src.analysis.strategies.BaseAnalysisStrategy --o src.analysis.analyzer.Analyzer : strategy
src.config.Config --o src.analysis.analyzer.Analyzer : config
src.config.Config --o src.osparc_batch.worker.Worker : config
@enduml
